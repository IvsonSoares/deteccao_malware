import requests
import os
from multiprocessing import Pool, cpu_count

# Lista de hashes das aplicações
hashes = ['11092CAF500805A3CF9C943D0D48E5CF2AEC456956691A36E7A541A362255D8A']

# API key
apikey = ''

# URL base
base_url = 'https://androzoo.uni.lu/api/download'

# Diretório onde os arquivos serão salvos
save_directory = ''

hashes_sem_arquivo = list()

NUM_PROCESSOS = 30


def file_exists(file_path):
    return os.path.exists(file_path)


for hash in hashes:
    if file_exists(f"{save_directory}{hash}.apk"):
        continue
    else:
        hashes_sem_arquivo.append(hash)


# Função para baixar um arquivo
def download_apk(hash):
    print(f"Baixando arquivo {hash}")
    url = f"{base_url}?apikey={apikey}&sha256={hash}"
    response = requests.get(url)
    if response.status_code == 200:
        file_path = f"{save_directory}{hash}.apk"
        with open(file_path, 'wb') as file:
            file.write(response.content)
        print(f"Downloaded {hash}.apk")
    else:
        print(f"Failed to download {hash}")


# Função para dividir a lista em sublistas
def chunkify(lst, n):
    return [lst[i::n] for i in range(n)]


# Baixar todos os arquivos
def processo(hash_list):
    for hash in hash_list:
        if file_exists(f"{save_directory}{hash}.apk"):
            continue
        download_apk(hash)
    print('Terminou')


if __name__ == '__main__':
    hashes_sublists = chunkify(hashes_sem_arquivo, NUM_PROCESSOS)
    with Pool(processes=NUM_PROCESSOS) as pool:
        pool.map(processo, hashes_sublists)
